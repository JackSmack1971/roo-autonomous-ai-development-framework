# Mode Capabilities Registry
# Each mode declares expertise, capabilities, and collaboration patterns

capabilities:
  sparc-orchestrator:
    role: "system_coordinator"
    primary_expertise: ["workflow_management", "conflict_resolution", "strategic_oversight"]
    secondary_capabilities: ["priority_balancing", "resource_allocation", "quality_enforcement"]
    can_detect: ["workflow_conflicts", "infinite_loops", "strategic_drift", "quality_regressions"]
    can_resolve: ["mode_conflicts", "priority_disputes", "resource_contention", "workflow_deadlocks"]
    creates_tasks_for: ["any_mode"]
    escalation_authority: true
    circuit_breaker_controls: true

  sparc-specification-writer:
    role: "requirements_specialist"
    primary_expertise: ["requirements_gathering", "acceptance_criteria", "user_stories"]
    secondary_capabilities: ["stakeholder_analysis", "scope_definition", "risk_identification"]
    can_detect: ["ambiguous_requirements", "missing_acceptance_criteria", "scope_creep", "conflicting_stakeholder_needs"]
    can_resolve: ["requirement_ambiguity", "acceptance_criteria_gaps", "user_story_completeness"]
    creates_tasks_for: ["data-researcher", "rapid-fact-checker", "sparc-architect", "sparc-ux-architect"]
    quality_gates:
      - "all_requirements_testable"
      - "acceptance_criteria_defined"
      - "stakeholder_alignment_confirmed"
      - "non_functional_requirements_captured"

  data-researcher:
    role: "evidence_specialist"
    primary_expertise: ["market_research", "technical_analysis", "competitive_intelligence"]
    secondary_capabilities: ["data_synthesis", "trend_analysis", "source_validation"]
    can_detect: ["insufficient_evidence", "conflicting_data", "outdated_information", "bias_in_sources"]
    can_resolve: ["data_gaps", "source_conflicts", "evidence_quality_issues"]
    creates_tasks_for: ["rapid-fact-checker", "sparc-architect", "sparc-security-architect"]
    mcp_dependencies: ["exa", "perplexity", "context7"]
    quality_gates:
      - "multiple_sources_confirmed"
      - "confidence_levels_documented"
      - "evidence_freshness_verified"
      - "bias_assessment_complete"

  rapid-fact-checker:
    role: "verification_specialist"  
    primary_expertise: ["fact_verification", "source_validation", "claim_analysis"]
    secondary_capabilities: ["confidence_assessment", "risk_evaluation", "evidence_synthesis"]
    can_detect: ["false_claims", "unreliable_sources", "confidence_gaps", "verification_failures"]
    can_resolve: ["fact_disputes", "source_reliability_questions", "claim_validation"]
    creates_tasks_for: ["data-researcher", "sparc-architect", "sparc-security-architect"]
    quality_gates:
      - "critical_claims_95_percent_verified"
      - "sources_independently_confirmed"
      - "confidence_levels_documented"
      - "risk_assessment_complete"

  sparc-architect:
    role: "system_designer"
    primary_expertise: ["system_architecture", "component_design", "integration_patterns"]
    secondary_capabilities: ["performance_analysis", "scalability_planning", "technology_selection"]
    can_detect: ["architectural_inconsistencies", "scalability_issues", "integration_complexity", "security_gaps", "performance_bottlenecks"]
    can_resolve: ["design_conflicts", "component_coupling_issues", "architectural_debt"]
    creates_tasks_for: ["sparc-security-architect", "database-specialist", "performance-engineer", "integration-specialist", "sparc-pseudocode-designer"]
    quality_gates:
      - "all_components_defined"
      - "interfaces_specified"
      - "data_flows_complete"
      - "non_functional_requirements_addressed"
      - "security_boundaries_identified"

  sparc-security-architect:
    role: "security_specialist"
    primary_expertise: ["threat_modeling", "security_architecture", "compliance_analysis"]
    secondary_capabilities: ["risk_assessment", "security_controls", "audit_requirements"]
    can_detect: ["threat_vectors", "compliance_gaps", "security_vulnerabilities", "privacy_violations"]
    can_resolve: ["security_architecture_issues", "threat_model_gaps", "compliance_deficiencies"]
    creates_tasks_for: ["sparc-architect", "data-privacy-specialist", "compliance-specialist", "sparc-autonomous-adversary"]
    quality_gates:
      - "threat_model_complete"
      - "security_controls_defined"
      - "compliance_requirements_mapped"
      - "privacy_impact_assessed"

  sparc-pseudocode-designer:
    role: "algorithm_designer"
    primary_expertise: ["algorithm_design", "function_specification", "complexity_analysis"]
    secondary_capabilities: ["error_handling_patterns", "testing_hooks", "performance_optimization"]
    can_detect: ["algorithm_complexity_issues", "error_handling_gaps", "testability_problems", "performance_concerns"]
    can_resolve: ["algorithm_optimization", "function_design_issues", "complexity_reduction"]
    creates_tasks_for: ["sparc-tdd-engineer", "performance-engineer", "sparc-code-implementer"]
    quality_gates:
      - "all_functions_under_50_lines"
      - "error_handling_specified"
      - "test_hooks_defined"
      - "complexity_analysis_complete"

  sparc-tdd-engineer:
    role: "test_specialist"
    primary_expertise: ["test_design", "coverage_analysis", "tdd_practices"]
    secondary_capabilities: ["test_automation", "integration_testing", "performance_testing"]
    can_detect: ["coverage_gaps", "test_quality_issues", "integration_test_missing", "performance_test_gaps"]
    can_resolve: ["test_completeness", "coverage_improvement", "test_reliability_issues"]
    creates_tasks_for: ["sparc-code-implementer", "performance-engineer", "integration-specialist", "sparc-qa-analyst"]
    quality_gates:
      - "coverage_above_90_percent"
      - "all_edge_cases_tested"
      - "integration_tests_defined"
      - "performance_tests_included"

  sparc-code-implementer:
    role: "implementation_specialist"
    primary_expertise: ["code_implementation", "refactoring", "debugging"]
    secondary_capabilities: ["performance_optimization", "code_quality", "maintainability"]
    can_detect: ["implementation_bugs", "performance_issues", "code_quality_problems", "maintainability_concerns"]
    can_resolve: ["coding_errors", "performance_bottlenecks", "refactoring_needs"]
    creates_tasks_for: ["sparc-tdd-engineer", "performance-engineer", "code-quality-specialist", "sparc-qa-analyst"]
    quality_gates:
      - "all_tests_passing"
      - "code_quality_standards_met"
      - "no_security_vulnerabilities"
      - "performance_requirements_satisfied"

  sparc-qa-analyst:
    role: "quality_specialist"
    primary_expertise: ["acceptance_testing", "quality_assurance", "defect_analysis"]
    secondary_capabilities: ["test_planning", "quality_metrics", "process_improvement"]
    can_detect: ["acceptance_failures", "quality_regressions", "process_gaps", "testing_inadequacies"]
    can_resolve: ["quality_issues", "acceptance_criteria_failures", "testing_process_improvements"]
    creates_tasks_for: ["sparc-tdd-engineer", "sparc-code-implementer", "sparc-autonomous-adversary", "quality-assurance-coordinator"]
    quality_gates:
      - "all_acceptance_criteria_met"
      - "quality_standards_verified"
      - "regression_tests_passing"
      - "user_acceptance_confirmed"

  sparc-autonomous-adversary:
    role: "security_tester"
    primary_expertise: ["penetration_testing", "vulnerability_assessment", "red_team_operations"]
    secondary_capabilities: ["risk_analysis", "attack_simulation", "security_validation"]
    can_detect: ["security_vulnerabilities", "attack_vectors", "defense_gaps", "compliance_violations"]
    can_resolve: ["security_testing_gaps", "vulnerability_validation", "attack_scenario_coverage"]
    creates_tasks_for: ["security-reviewer", "sparc-security-architect", "sparc-integrator"]
    mcp_dependencies: ["context7", "playwright"]
    quality_gates:
      - "critical_vulnerabilities_tested"
      - "attack_scenarios_validated"
      - "security_controls_verified"
      - "risk_assessment_complete"

  security-reviewer:
    role: "security_auditor"
    primary_expertise: ["security_auditing", "code_review", "compliance_verification"]
    secondary_capabilities: ["sarif_analysis", "vulnerability_reporting", "remediation_guidance"]
    can_detect: ["code_vulnerabilities", "security_misconfigurations", "compliance_violations"]
    can_resolve: ["security_audit_findings", "compliance_remediation", "vulnerability_documentation"]
    creates_tasks_for: ["sparc-code-implementer", "sparc-security-architect", "compliance-specialist"]
    quality_gates:
      - "security_scan_complete"
      - "vulnerabilities_documented"
      - "remediation_plan_created"
      - "compliance_verified"

  sparc-integrator:
    role: "integration_specialist"
    primary_expertise: ["system_integration", "end_to_end_testing", "deployment_validation"]
    secondary_capabilities: ["performance_validation", "scalability_testing", "monitoring_setup"]
    can_detect: ["integration_failures", "performance_degradation", "scalability_issues", "monitoring_gaps"]
    can_resolve: ["integration_issues", "system_inconsistencies", "deployment_problems"]
    creates_tasks_for: ["sparc-platform-engineer", "performance-engineer", "monitoring-specialist", "sparc-sre-engineer"]
    quality_gates:
      - "all_integrations_validated"
      - "end_to_end_tests_passing"
      - "performance_targets_met"
      - "monitoring_operational"

  sparc-platform-engineer:
    role: "infrastructure_specialist"
    primary_expertise: ["infrastructure_as_code", "ci_cd_pipelines", "deployment_automation"]
    secondary_capabilities: ["container_orchestration", "security_hardening", "disaster_recovery"]
    can_detect: ["infrastructure_issues", "pipeline_failures", "security_misconfigurations", "scalability_constraints"]
    can_resolve: ["deployment_problems", "infrastructure_optimization", "pipeline_improvements"]
    creates_tasks_for: ["sparc-sre-engineer", "security-reviewer", "performance-engineer"]
    quality_gates:
      - "infrastructure_as_code_complete"
      - "pipelines_validated"
      - "security_hardening_applied"
      - "disaster_recovery_tested"

  sparc-sre-engineer:
    role: "reliability_specialist"
    primary_expertise: ["sli_slo_definition", "monitoring_alerting", "incident_response"]
    secondary_capabilities: ["performance_optimization", "capacity_planning", "error_budgets"]
    can_detect: ["reliability_issues", "monitoring_gaps", "alerting_problems", "capacity_constraints"]
    can_resolve: ["reliability_improvements", "monitoring_enhancements", "incident_procedures"]
    creates_tasks_for: ["monitoring-specialist", "performance-engineer", "sparc-platform-engineer"]
    quality_gates:
      - "slos_defined_and_monitored"
      - "alerting_configured"
      - "runbooks_complete"
      - "error_budgets_established"

# Dynamic Mode Creation Patterns
dynamic_modes:
  database-specialist:
    trigger_conditions: ["complex_data_operations", "performance_bottlenecks", "data_modeling_needs"]
    inherits_from: "sparc-architect"
    specialized_expertise: ["database_design", "query_optimization", "data_modeling"]

  performance-engineer:
    trigger_conditions: ["performance_requirements", "scalability_concerns", "optimization_needs"]
    inherits_from: "sparc-architect"  
    specialized_expertise: ["performance_optimization", "load_testing", "scalability_analysis"]

  integration-specialist:
    trigger_conditions: ["complex_integrations", "api_design", "service_mesh_needs"]
    inherits_from: "sparc-architect"
    specialized_expertise: ["api_design", "service_integration", "protocol_selection"]

  compliance-specialist:
    trigger_conditions: ["regulatory_requirements", "audit_needs", "compliance_gaps"]
    inherits_from: "sparc-security-architect"
    specialized_expertise: ["regulatory_compliance", "audit_preparation", "policy_enforcement"]

  data-privacy-specialist:
    trigger_conditions: ["gdpr_requirements", "privacy_concerns", "data_protection_needs"]
    inherits_from: "sparc-security-architect"
    specialized_expertise: ["privacy_by_design", "data_protection", "consent_management"]

  code-quality-specialist:
    trigger_conditions: ["technical_debt", "code_quality_issues", "maintainability_concerns"]
    inherits_from: "sparc-code-implementer"
    specialized_expertise: ["code_quality", "refactoring", "technical_debt_management"]

  monitoring-specialist:
    trigger_conditions: ["observability_gaps", "monitoring_issues", "alerting_problems"]
    inherits_from: "sparc-sre-engineer"
    specialized_expertise: ["observability", "monitoring_systems", "alerting_strategies"]

# Meta-Modes for System Management
meta_modes:
  quality-assurance-coordinator:
    role: "system_quality_monitor"
    monitors_all_modes: true
    continuous_quality_assessment: true
    cross_mode_consistency_checking: true
    
  technical-debt-manager:
    role: "debt_tracker"
    tracks_technical_decisions: true
    identifies_improvement_opportunities: true
    prioritizes_maintenance_tasks: true