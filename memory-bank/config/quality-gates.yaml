# Quality Gates Configuration
# Defines quality gates that must be enforced for different types of patterns

# Security Quality Gates
security_gates:
  authentication_review:
    name: "Authentication Mechanism Review"
    description: "Review authentication implementation for security vulnerabilities"
    required_for: ["security"]
    automatic_check: false
    reviewer: "security_architect"
    criteria:
      - "OAuth2/JWT properly implemented"
      - "No hardcoded credentials"
      - "Session management secure"
      - "Input validation in place"

  data_protection_review:
    name: "Data Protection Review"
    description: "Review data handling for privacy and protection compliance"
    required_for: ["security"]
    automatic_check: false
    reviewer: "security_architect"
    criteria:
      - "Data encryption at rest"
      - "Secure data transmission"
      - "Access control implemented"
      - "Audit logging enabled"

  vulnerability_scan:
    name: "Security Vulnerability Scan"
    description: "Automated scan for known security vulnerabilities"
    required_for: ["security", "integration"]
    automatic_check: true
    scan_tools: ["owasp_zap", "dependency_check"]
    severity_threshold: "medium"

# Performance Quality Gates
performance_gates:
  load_testing:
    name: "Load Testing Validation"
    description: "Validate performance under load conditions"
    required_for: ["performance"]
    automatic_check: true
    metrics:
      response_time_max: 1000  # ms
      throughput_min: 100      # requests/second
      error_rate_max: 0.01     # 1%
    test_duration: 300         # seconds

  database_optimization_review:
    name: "Database Optimization Review"
    description: "Review database queries and optimization"
    required_for: ["performance"]
    automatic_check: false
    reviewer: "database_specialist"
    criteria:
      - "N+1 queries eliminated"
      - "Proper indexing implemented"
      - "Connection pooling configured"
      - "Query execution plan optimized"

  memory_leak_detection:
    name: "Memory Leak Detection"
    description: "Detect and prevent memory leaks"
    required_for: ["performance"]
    automatic_check: true
    tools: ["memory_profiler", "heap_dump_analyzer"]
    thresholds:
      memory_growth_rate_max: 0.05  # 5% growth per hour
      gc_overhead_max: 0.1          # 10% GC overhead

# Architecture Quality Gates
architecture_gates:
  design_review:
    name: "Architecture Design Review"
    description: "Review architectural decisions and patterns"
    required_for: ["architecture"]
    automatic_check: false
    reviewer: "architect"
    criteria:
      - "Separation of concerns maintained"
      - "SOLID principles followed"
      - "Scalability considerations addressed"
      - "Maintainability requirements met"

  dependency_analysis:
    name: "Dependency Analysis"
    description: "Analyze component dependencies and coupling"
    required_for: ["architecture", "integration"]
    automatic_check: true
    metrics:
      circular_dependencies: 0
      coupling_factor_max: 0.7
      cohesion_factor_min: 0.6
    tools: ["dependency_analyzer", "architecture_linter"]

  interface_contract_validation:
    name: "Interface Contract Validation"
    description: "Validate API and component interfaces"
    required_for: ["architecture", "integration"]
    automatic_check: true
    validation_types: ["openapi_spec", "interface_contract", "data_schema"]
    contract_coverage_min: 0.9

# Quality Assurance Gates
qa_gates:
  test_coverage:
    name: "Test Coverage Validation"
    description: "Ensure adequate test coverage"
    required_for: ["quality"]
    automatic_check: true
    coverage_types:
      unit_test_coverage: 0.9      # 90%
      integration_test_coverage: 0.8  # 80%
      e2e_test_coverage: 0.6       # 60%
    coverage_tools: ["jacoco", "istanbul", "coverage.py"]

  code_quality_scan:
    name: "Code Quality Scan"
    description: "Automated code quality analysis"
    required_for: ["quality"]
    automatic_check: true
    tools: ["sonar_qube", "eslint", "pylint"]
    quality_gates:
      technical_debt_ratio_max: 0.05  # 5%
      code_smell_density_max: 0.1     # 10 smells per 100 lines
      duplication_density_max: 0.03   # 3%

  accessibility_audit:
    name: "Accessibility Audit"
    description: "Ensure accessibility compliance"
    required_for: ["quality"]
    automatic_check: true
    standards: ["wcag_2_1_aa", "section_508"]
    audit_tools: ["axe", "lighthouse", "wave"]
    compliance_threshold: 0.95

# Integration Quality Gates
integration_gates:
  api_contract_compliance:
    name: "API Contract Compliance"
    description: "Validate API contracts and compatibility"
    required_for: ["integration"]
    automatic_check: true
    validation_types: ["request_response_format", "error_handling", "pagination"]
    contract_tools: ["swagger_validator", "api_contract_tester"]

  service_interoperability:
    name: "Service Interoperability Testing"
    description: "Test service interactions and data flow"
    required_for: ["integration"]
    automatic_check: true
    test_scenarios: ["happy_path", "error_handling", "boundary_conditions"]
    interoperability_metrics:
      message_success_rate_min: 0.99
      data_transformation_accuracy_min: 0.999
      service_response_time_max: 2000  # ms

  data_consistency_validation:
    name: "Data Consistency Validation"
    description: "Ensure data consistency across services"
    required_for: ["integration"]
    automatic_check: true
    consistency_checks: ["referential_integrity", "data_format", "business_rules"]
    validation_tools: ["data_validator", "consistency_checker"]

# Deployment Quality Gates
deployment_gates:
  infrastructure_validation:
    name: "Infrastructure Validation"
    description: "Validate deployment infrastructure"
    required_for: ["deployment"]
    automatic_check: true
    checks:
      - "Infrastructure as Code validation"
      - "Security group configuration"
      - "Load balancer setup"
      - "Monitoring and logging"
    tools: ["terraform_validate", "infrastructure_linter"]

  deployment_testing:
    name: "Deployment Testing"
    description: "Test deployment process and rollback capability"
    required_for: ["deployment"]
    automatic_check: true
    test_types: ["blue_green_deployment", "canary_deployment", "rollback_procedure"]
    success_criteria:
      deployment_time_max: 600     # 10 minutes
      downtime_max: 60             # 1 minute
      rollback_success_rate: 1.0   # 100%

  production_readiness:
    name: "Production Readiness Assessment"
    description: "Final assessment for production deployment"
    required_for: ["deployment"]
    automatic_check: false
    reviewer: "platform_engineer"
    checklist:
      - "Performance benchmarks met"
      - "Security assessment completed"
      - "Monitoring and alerting configured"
      - "Documentation updated"
      - "Rollback plan documented"
      - "Incident response plan ready"

# Gate Execution Configuration
gate_execution:
  parallel_execution: true
  max_parallel_gates: 3
  timeout_minutes: 30
  retry_attempts: 2
  retry_delay_seconds: 60

# Gate Dependencies
gate_dependencies:
  security_first: true  # Security gates must pass before others
  performance_after_functional: true  # Performance gates after functional tests
  deployment_after_all: true  # Deployment gates after all others pass

# Gate Result Processing
result_processing:
  failure_threshold: 0.95  # 95% of gates must pass
  critical_gate_failure: true  # Any critical gate failure blocks progression
  warning_threshold: 0.85  # Below this triggers warnings but allows continuation
  result_retention_days: 90

# Gate Automation
automation:
  auto_schedule: true
  trigger_events: ["pattern_application", "quality_check", "deployment_request"]
  notification_channels: ["slack", "email", "dashboard"]
  escalation_policy:
    first_warning: "notify_team_lead"
    second_warning: "notify_manager"
    critical_failure: "notify_executive"

# Gate Customization
customization:
  project_specific_gates: true
  environment_specific_rules: true
  team_skill_based_assignment: true
  gate_priority_weighting: true

# Documentation Quality Gates
documentation_gates:
  api_documentation_review:
    name: "API Documentation Review"
    description: "Review API documentation completeness and accuracy"
    required_for: ["integration", "deployment"]
    automatic_check: true
    tools: ["documentation_validator", "openapi_linter"]
    criteria:
      - "All endpoints documented with parameters"
      - "Response schemas defined"
      - "Error responses documented"
      - "Usage examples provided"
      - "Authentication requirements specified"

  code_documentation_review:
    name: "Code Documentation Review"
    description: "Review code documentation coverage and quality"
    required_for: ["quality", "architecture"]
    automatic_check: true
    tools: ["docstring_analyzer", "comment_density_checker"]
    criteria:
      - "Public functions have docstrings"
      - "Classes have documentation"
      - "Complex logic has explanatory comments"
      - "Module-level documentation exists"
      - "Inline comments for clarity"

  architecture_documentation_review:
    name: "Architecture Documentation Review"
    description: "Review system architecture documentation"
    required_for: ["architecture", "deployment"]
    automatic_check: false
    reviewer: "architect"
    criteria:
      - "System overview documented"
      - "Component diagrams exist"
      - "Data flow diagrams provided"
      - "Deployment architecture specified"
      - "Architecture decision records maintained"

  usage_documentation_review:
    name: "Usage Documentation Review"
    description: "Review user-facing documentation completeness"
    required_for: ["deployment", "integration"]
    automatic_check: true
    tools: ["documentation_link_checker", "content_validator"]
    criteria:
      - "Getting started guide exists"
      - "Installation instructions provided"
      - "Configuration guide available"
      - "Troubleshooting guide included"
      - "FAQ section maintained"

# Monitoring and Reporting
monitoring:
  gate_execution_metrics: true
  failure_pattern_analysis: true
  performance_trends: true
  quality_score_tracking: true
  documentation_compliance_tracking: true
  reporting_schedule: "daily"
  dashboard_integration: true